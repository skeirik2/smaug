load ../init.maude
load ../../src/remove-ids/remove-ids.maude

set include BOOL off .

fmod BOOL-NO-BUILTIN is
  pr TRUTH-VALUE .
  op _and_ : Bool Bool -> Bool [assoc comm prec 50] .
  op _or_  : Bool Bool -> Bool [assoc comm] .
  op not_  : Bool -> Bool .
  op _==_  : Bool Bool -> Bool . **** stub for real equality/disequality
  op _=/=_ : Bool Bool -> Bool .
  vars B : Bool .
  eq B and true  = B     [variant] .
  eq B and false = false [variant] .
  eq B or false  = B     [variant] .
  eq B or true   = true  [variant] .
  eq not true    = false [variant] .
  eq not false   = true  [variant] .
endfm

fmod NAT-CTOR-NO-BUILTIN is
  pr BOOL-NO-BUILTIN .
  sorts Nat NzNat .
  subsorts NzNat < Nat .
  op 0   : -> Nat             [ctor] .
  op 1   : -> NzNat           [ctor] .
  op _+_ : NzNat Nat -> NzNat [ctor assoc comm id: 0] .
  op _+_ : Nat   Nat -> Nat   [ctor assoc comm id: 0] .
endfm

fmod NAT-NO-BUILTIN is
  pr NAT-CTOR-NO-BUILTIN .
  op s     : Nat -> Nat .      **** operator is only used 6 times
  op _<_   : Nat Nat -> Bool .
  op _<=_  : Nat Nat -> Bool .
  op _==_  : Nat Nat -> Bool . **** stub for real equality/disequality
  op _=/=_ : Nat Nat -> Bool .
  eq s(N:Nat)                           = N:Nat + 1 [variant] .
  eq N:Nat           <  P:NzNat + N:Nat = true      [variant] .
  eq N:Nat + M:Nat   <  N:Nat           = false     [variant] .
  eq P:NzNat + N:Nat <= N:Nat           = false     [variant] .
  eq N:Nat           <= N:Nat + M:Nat   = true      [variant] .
endfm

fmod NAT+ is
  pr NAT-NO-BUILTIN .
  op _~_ : Nat Nat -> Bool [comm] .
  eq N:Nat ~ N:Nat           = true .
  eq N:Nat ~ N:Nat + P:NzNat = false .

  **** constants defined for convenience
  ops 2 3 4 5 6 7 8 9 10 11 12 13 14 15 80 81 256 500 1023 1024 1050 1056 : -> Nat .
  eq 2    = 1 + 1 .
  eq 3    = 1 + 1 + 1 .
  eq 4    = 1 + 1 + 1 + 1 .
  eq 5    = 1 + 1 + 1 + 1 + 1 .
  eq 6    = 1 + 1 + 1 + 1 + 1 + 1 .
  eq 7    = 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 8    = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 9    = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 10   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 11   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 12   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 13   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 14   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  eq 15   = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 .
  **** difference between non-consecutive numbers should be greater than 1
  eq 80   = 15   + 1 + 1 + 1 .
  eq 81   = 80   + 1 .
  eq 256  = 81   + 1 + 1 + 1 .
  eq 1023 = 256  + 1 + 1 + 1 .
  eq 1024 = 1023 + 1 .
  eq 1056 = 1024 + 1 + 1 + 1 + 1 .
endfm

fmod PROC-ID is
  pr NAT+ .

  sort ProcessId       .  **** general sort of process identifiers
  sort NonNetProcId    .  **** processes which cannot act like a network
  sort NonWebAppId     .  **** processes which are not webapps
  sort PipeId          .  **** processes which can act like pipes
  sort NonNetPipeId    .  **** processes which are pipes and not networks
  sort NonWebPipeId    .  **** processes which are pipes and not webapps

  sort KernelId        .  **** the kernel process's id
  sort WebAppMgrId     .  **** the web app manager's id
  sort UIId            .  **** the UI process's id
  sort DisplayId       .  **** the display process's id
  sort NICId           .  **** the NIC process's id
  sort NetProcId       .  **** processes which can act like a network
  sort WebAppId        .  **** processes which can act like a webapp

  subsorts KernelId WebAppId NetProcId UIId DisplayId NICId WebAppMgrId < ProcessId .
  subsorts UIId NetProcId WebAppId < PipeId < ProcessId .
  subsorts KernelId DisplayId NICId UIId WebAppId < NonNetProcId < ProcessId .
  subsorts KernelId DisplayId NICId UIId NetProcId < NonWebAppId < ProcessId .
  subsorts UIId WebAppId < NonNetPipeId < NonNetProcId PipeId < ProcessId .
  subsorts UIId NetProcId < NonWebPipeId < NonWebAppId PipeId < ProcessId .

  op kernel    :     -> KernelId .
  op webapp    :     -> WebAppId .
  op webapp    : Nat -> WebAppId .
  op network   :     -> NetProcId .
  op network   : Nat -> NetProcId .
  op ui        :     -> UIId .
  op display   :     -> DisplayId .
  op nic       :     -> NICId .
  op webappmgr :     -> WebAppMgrId .

  vars PId   : ProcessId .
  vars KeId  : KernelId .
  vars WAId  : WebAppId .
  vars NPId  : NetProcId .
  vars DiId  : DisplayId .
  vars UiId  : UIId .
  var  WAMId : WebAppMgrId .
  vars N N'  : Nat .

  op _~_ : ProcessId ProcessId -> Bool [comm] .
  eq PId ~ PId
   = true .
  eq KeId ~ WAId
   = false .
  eq KeId ~ NPId
   = false .
  eq KeId ~ UiId
   = false .
  eq KeId ~ DiId
   = false .
  eq webapp ~ webapp(N)
   = false .
  eq webapp(N) ~ webapp(N')
   = N ~ N' .
  eq WAId ~ NPId
   = false .
  eq WAId ~ UiId
   = false .
  eq WAId ~ DiId
   = false .
  eq network ~ network(N)
   = false .
  eq network(N) ~ network(N')
   = N ~ N' .
  eq NPId ~ UiId
   = false .
  eq NPId ~ DiId
   = false .
  eq UiId ~ DiId
   = false .
  eq WAMId ~ KeId
   = false .
  eq WAMId ~ WAId
   = false .
  eq WAMId ~ NPId
   = false .
  eq WAMId ~ DiId
   = false .
  eq WAMId ~ UiId
   = false .
  eq WAMId ~ NPId
   = false .
endfm

fmod SYS is
  pr PROC-ID .
  sorts Object EmptyConfiguration Configuration State .
  sorts Attribute EmptyAttributeSet AttributeSet .
  subsorts Object EmptyConfiguration < Configuration .
  subsorts Attribute EmptyAttributeSet < AttributeSet .

  **** objects
  op <_|_> : ProcessId AttributeSet                -> Object             [ctor] .
  **** attributes
  op _,_   : AttributeSet AttributeSet             -> AttributeSet       [ctor assoc comm id: none] .
  op _,_   : EmptyAttributeSet EmptyAttributeSet   -> EmptyAttributeSet  [ctor ditto] .
  op none  :                                       -> EmptyAttributeSet  [ctor] .
  **** configuration
  op __    : Configuration Configuration           -> Configuration      [ctor assoc comm id: none] .
  op __    : EmptyConfiguration EmptyConfiguration -> EmptyConfiguration [ctor ditto] .
  op none  :                                       -> EmptyConfiguration [ctor] .
  **** state
  op {_}   : Configuration                         -> State              [ctor] .
endfm

fmod LABEL is pr NAT+ .
  sorts Label MaybeLabel .
  subsorts Label < MaybeLabel .
  op about-blank :     -> Label      [ctor] .
  op url         : Nat -> Label      [ctor] .
  op nolabel     :     -> MaybeLabel [ctor] .

  **** use var-sat built-in equality/diseqaulity
  op _==_  : Label Label -> Bool .
  op _=/=_ : Label Label -> Bool .

  **** Equality enrichment (added by Camilo)
  op _~_ : Label Label -> Bool [comm] .
  eq L:Label ~ L:Label
   = true .
  eq about-blank ~ url(N:Nat)
   = false .
  eq url(N:Nat) ~ url(N':Nat)
   = N:Nat ~ N':Nat .
endfm

fmod LABEL-LIST is pr LABEL .
  sort LabelList .
  subsort Label < LabelList .
  op mtLL : -> LabelList [ctor] .
  op _;_ : LabelList LabelList -> LabelList   [ctor assoc id: mtLL] .
endfm

fmod LABEL-SET is pr LABEL .
  sort LabelSet .
  subsorts Label < LabelSet .
  op _&_  : LabelSet LabelSet -> LabelSet [ctor assoc comm id: mtLS] .
  op mtLS :                   -> LabelSet [ctor] .
endfm

fmod MSG is pr PROC-ID . pr LABEL .
  **** message type definition
  sorts MsgType Message .
  op MSG-NEW-URL    : -> MsgType [ctor] . --- creates a new web app with given URL
  op MSG-FETCH-URL  : -> MsgType [ctor] . --- tells network to fetch data for given URL
  op MSG-RETURN-URL : -> MsgType [ctor] . --- stores data that was fetched from internet by MSG-FETCH-URL
  op MSG-SWITCH-TAB : -> MsgType [ctor] . --- causes displayed tab to be switched
  op msg  : ProcessId ProcessId MsgType Label -> Message [ctor] .
endfm

fmod MSG-LIST is pr MSG .
  **** message list definition
  sort MessageList .
  subsort Message < MessageList .
  op none : -> Message [ctor] .
  op mt   : -> MessageList [ctor] .
  op _;_  : MessageList MessageList -> MessageList [ctor assoc id: mt] .
endfm

fmod PIPEPROC is inc MSG-LIST . inc SYS .
  *** channels for messages to and from the kernel
  op fromKernel : MessageList -> Attribute [ctor] .
  op toKernel   : MessageList -> Attribute [ctor] .
endfm

fmod WEBAPPMGR is inc SYS .
**** next web app number, i.e. unused process id number for a web app
  op nextWAN : Nat -> Attribute [ctor] .
endfm

**** Note that the webapp does not check whether what it gets back
**** from the network is actually the website it asked for in the
**** first place. We represent the data it gets by only giving its
**** URL, that is, only giving its label. This changes the rendered
**** URL to the URL the data is received from.
**** The 'missing' check above is essentially happening in
**** checkConnection(), in that only appropriately connected network
**** processes and web apps can communicate, based on the policies,
**** and only the right data can be transmitted.
****
**** need the capability to check whether a process id is for a webapp
**** this is now handled by subsorting
fmod WEBAPP is
  inc WEBAPPMGR .
  inc LABEL .
  inc SYS .
**** Webapps have data to be put on screen - we only refer to it by
**** the label of the page where it is from.
  op rendered : Label -> Attribute [ctor] .
**** This is where the webapp should load its data from!
  op URL : Label -> Attribute [ctor] .
**** This notes whether it has already loaded, or has not yet started to do so.
  op loading : Bool -> Attribute [ctor] .
endfm

**** network process gets a request from a webapp; network process
**** forms an ethernet frame; the kernel check that frame and give to
**** NIC; NIC generate instant answer in form of EF; that ethernet
**** frame then gets returned to the (correct! check origin, hopefully
**** this one) network process which returns data to the web page that
**** requested it originally
****
**** network proc forms packet for transmission - kernel has physical
**** address, kernel gives physical address to driver (but NO access
**** to that location's content), driver can program NIC to send the
**** packet at given address [kernel double checks that this address
**** is the given one request from a webapp:
**** Made into the topmost labeled rule [request-from-webapp]
**** in module KERNEL
****
**** The network process writes a request into the memory for pickup
**** by NIC - needing to go through kernel in next step
**** Made into the labeled topmost conditional rule [proc-out]
**** in module KERNEL
****
**** Kernel now gives this to NIC - checking that target is what is
**** allowed for this network process .
***** That DMA rule is in the kernel
**** The NIC can create a response for any message -
**** order of returns is NOT guaranteed
**** Extended to two rewrite rules to simulate the associativity
**** axiom removed from the lists; the first rule rotates the labels
**** in attribute out, while the second one moves the top label in
**** out to the end of the list in attribute in
**** Made into topmost rules [nic0] and [nic1]
**** in module KERNEL
****
**** Incoming ethernet frame in the NIC gets assigned to the
**** appropriate network process by the kernel
***** That DMA rule is in the kernel
**** The network  process reads a return by NIC from memory  - did go
**** through kernel in prior step
**** Made into labeled topmost rule [proc-in]
**** in module KERNEL
****
**** Sending a message from the network process to the webapp - this
**** will be subject to kernel checking according to regular policies
**** Made into labeled topmost conditional rule [msg-to-kernel]
**** in module KERNEL
**** need the capability to check whether a process id is for a netproc
**** this is now handled by subsorting
fmod NETPROC is inc LABEL-LIST . inc SYS .
  op returnTo : ProcessId -> Attribute [ctor] .
  op in       : LabelList -> Attribute [ctor] .
  op out      : LabelList -> Attribute [ctor] .
endfm

fmod MEMORY is inc SYS . inc LABEL .
  ops mem-out mem-in : MaybeLabel -> Attribute [ctor] .
endfm

fmod NIC is inc SYS . inc LABEL-SET . inc LABEL-LIST .
  op nic-out : LabelSet  -> Attribute [ctor] .
  op nic-in  : LabelList -> Attribute [ctor] .
endfm

fmod KERNEL-POLICIES is inc SYS . pr MSG . pr LABEL .
**** define how to build a single policy! then add them into the initial configuration
**** Q: where to find the policies? A: ibos_source/dKernel/access.h
**** ibos_source/dKernel/access.cc (line 195 and down; shows who can
**** communicate to whom)
****
**** Q: for those things allowed  to communicate with each other, can
**** ANYTHING  be sent  or  is  there further  control?  A: Only  the
**** MsgType given in  that assignment can be sent!  These are all
**** OP(browser)-related messages!
****
**** Policies are mostly browser-related, but can be on a lower level
**** [i.e., syscall level], e.g., for networkProc -> hardware
**** communication
  sort Policy .
  sort PolicySet .
  subsort Policy < PolicySet .
  op mtPS :                     -> PolicySet [ctor] .
  op _,_  : PolicySet PolicySet -> PolicySet [ctor assoc comm id: mtPS] .

  op msgPolicy        : PolicySet                     -> Attribute [ctor] .  **** make the policylist an attribute with this wrapper
  op policy           : PipeId PipeId MsgType -> Policy    [ctor] .  **** a policy is a sender Id, receiver Id and MsgType (only PipeProcs can communicate with kernel)
  op nextNetworkProc  : Nat                           -> Attribute [ctor] .  **** the next available proc id for a network proc
  op handledCurrently : Message                       -> Attribute [ctor] .  **** the message currently handled by the kernel
**** webapp info stored by kernel
**** label identifies the website this webapp is showing - this needs to match the
**** first label of a network proc to allow communication
  sorts WebappProcInfo WebappProcInfoSet .
  subsorts WebappProcInfo < WebappProcInfoSet .
  op pi        : WebAppId Label                      -> WebappProcInfo    [ctor] .
  op mtWPIS    :                                     -> WebappProcInfoSet [ctor] .
  op _,_       : WebappProcInfoSet WebappProcInfoSet -> WebappProcInfoSet [ctor assoc comm id: mtWPIS] .
  op weblabels : WebappProcInfoSet                   -> Attribute         [ctor] .
****network proc info stored by kernel
**** first label to identify related webapps, second label for whom
**** this network proc can communicate with (via actual ethernet; to outside world)
  sorts NetworkProcInfo NetworkProcInfoSet .
  subsorts NetworkProcInfo < NetworkProcInfoSet .
  op pi            : NetProcId Label Label                 -> NetworkProcInfo    [ctor] .
  op mtNPIS        :                                       -> NetworkProcInfoSet [ctor] .
  op _,_           : NetworkProcInfoSet NetworkProcInfoSet -> NetworkProcInfoSet [ctor assoc comm id: mtNPIS] .
  op networklabels : NetworkProcInfoSet                    -> Attribute          [ctor] .
**** These next two rules are what was promised above in the network
**** process module above when referring to DMA rules.
**** Kernel gives network process DMA to NIC - checking that target is
**** what is allowed for this network process .
**** Made into a labeled topmost conditional rule [mem-out]
**** in module KERNEL
****
**** Incoming ethernet frame in the NIC gets assigned to the
**** appropriate network process DMA by the kernel
**** Made into a labeled topmost conditional rule [mem-in]
**** in module KERNEL
****
**** Receiving an OP message sets the sender ProcessId correctly. This
**** also subjects the message to policy checking.
****
**** Made into a topmost rule in module KERNEL
****
**** Once the policy has been checked and any further processing has
**** been dealt with, OP messages are forwarded.
****
**** Made into a topmost rule in module KERNEL
****
  op displayedTopBar  : Label      -> Attribute [ctor] . **** kernel-owned address bar - part of the 'secure' UI
  op activeWebapp     : WebAppId   -> Attribute [ctor] . **** display memory modeled as an object.
  op displayedContent : Label      -> Attribute [ctor] . **** label of the things being displayed as an attribute of that object
****
  op kernelDo         : Message -> Message   [ctor] . **** Kernel needs to do something
**** Once the policy has been checked, further processing is taken care of;
**** switching the active tab in the UI is done here.
**** The kernel will change topbar, change memory access
**** for display - zero display memory first - let new owner refresh
**** display
****
**** Made into a topmost rule in module KERNEL
****
**** Allow the active webapp to change the display whenever it wants to do so.
**** ONLY the active webapp can make changes to the display!
**** Note that this is the more abstract version, for the concrete and buggy one, see the memory.maude file.
**** Made into a tomost rule that uses equality enrichment in the condition
**** in module KERNEL
****
**** Creating a NEW webapp:
**** Once the policy has been checked, further processing is taken care of;
**** this switches the active webapp to the newly created webapp for this URL
**** The kernel will change topbar, change memory access
**** for display - zero display memory first - let new owner refresh
**** display later
**** Q: How does the UI signal if the user types a new URL into the
**** address bar for a fresh webapp; and what about an existing
**** webapp [say that webapp is at URL A and the user types a URL B]
**** A: new webapp! label NEVER changes - so new webapp is needed!
****
**** check whether there is a policy in the policyset that allows the
**** message to be sent - initial policy set defined in RUN
**** Transformed into labeled conditional rules in module KERNEL
****
  var L L1 L2 : Label . var N N' : Nat . var NPIS : NetworkProcInfoSet . var WPIS : WebappProcInfoSet .
**** auxiliary function for checking that no network process
**** links to a given label
  op no-networkproc-for-label : Label NetworkProcInfoSet -> Bool .
  eq [nnpl1] : no-networkproc-for-label(L,mtNPIS)                      = true .
  eq [nnpl2] : no-networkproc-for-label(L,(pi(network(N),L1,L2),NPIS)) = not (L ~ L2) and no-networkproc-for-label(L,NPIS) .
  eq [nnpl3] : no-networkproc-for-label(L,(pi(network,L1,L2),NPIS))    = no-networkproc-for-label(L,NPIS) .
**** Auxiliary functions for checking connections for network procs and
**** webapps in the information sets that are defined in the kernel
**** checks that the information of a given procid of sort natural is not in a set of
**** network information
  op no-networkproc : Nat NetworkProcInfoSet -> Bool .
  eq [nnp1] : no-networkproc(N,mtNPIS)                       = true .
  eq [nnp2] : no-networkproc(N,(pi(network(N'),L1,L2),NPIS)) = not(N ~ N') and no-networkproc(N,NPIS) .
  eq [nnp3] : no-networkproc(N,(pi(network,L1,L2),NPIS))     = no-networkproc(N,NPIS) .
**** checks that the information of a given procid of sort natural is not in a set of
**** webapp information
  op no-webapp : Nat WebappProcInfoSet -> Bool .
  eq [nwa1] : no-webapp(N,mtWPIS)                   = true .
  eq [nwa2] : no-webapp(N,(pi(webapp(N'),L1),WPIS)) = not(N ~ N') and no-webapp(N,WPIS) .
  eq [nwa3] : no-webapp(N,(pi(webapp,L1),WPIS))     = no-webapp(N,WPIS) .
endfm

mod KERNEL is
**** A lot of the 'kernel' things are found above in 'KERNEL-POLICIES' instead
  inc KERNEL-POLICIES .
  inc MSG-LIST        .
  inc LABEL-LIST      .
  inc WEBAPP          .
  inc PIPEPROC        .
  inc NETPROC         .
  inc MEMORY          .
  inc NIC             .

  var Att Att2    : AttributeSet .
  var Att3        : AttributeSet .
  var Cnf         : Configuration .
  var L L' L''    : Label .
  var L1 L2 L3     : Label .
  var LL LL' LL2  : LabelList .
  var LS          : LabelSet .
  var ML ML'      : MessageList .
  var NPIS        : NetworkProcInfoSet .
  var MP          : PolicySet .
  var WPIS        : WebappProcInfoSet .
  var MT          : MsgType .

  var N N' NewWA  : Nat .

  var URL         : Label .

  var PI PI'      : ProcessId    .

  var ORG         : PipeId       .

  var WI WI'      : WebAppId     .
  var NI NI'      : NetProcId    .
  var PPI PPI'    : PipeId       .
  var PPI1 PPI2   : PipeId       .
  var NNPI        : NonNetPipeId .
  var NNPI1 NNPI2 : NonNetPipeId .
  var NWPI1 NWPI2 : NonWebPipeId .

**** Page Fault and other invalid messages need not be modeled, as
**** they are simply dropped in the actual source code, and in the
**** model they will never be generated.

**** Made into a topmost labeled conditional rule from module WEBAPP
  rl [fetch] :
     { < WI | rendered(L) ,  URL(L') , loading(false) , toKernel(ML) ,                                    Att > Cnf }
  => { < WI | rendered(L) ,  URL(L') , loading(true)  , toKernel(ML ; msg(WI,network,MSG-FETCH-URL,L')) , Att > Cnf } .

**** Made into a labeled topmost conditional rule from module WEBAPP
  rl [render] :
     { < WI | rendered(L)  , URL(L') , loading(true) , fromKernel(msg(PI, WI, MSG-RETURN-URL,L2) ; ML) , Att > Cnf }
  => { < WI | rendered(L2) , URL(L') , loading(true) , fromKernel(ML) ,                                  Att > Cnf } .

**** Made into a topmost rule from module NETWORK
**** kernel tells network process to fetch data for a webapp
**** TODO: check that returnTo does the right thing (it seems like returnTo should be stored per URL to fetch)
  rl [request-from-webapp] :
     { < NI | returnTo(PI),  out(LL),     fromKernel(msg(PI', NI, MSG-FETCH-URL, L) ; ML'), Att > Cnf }
  => { < NI | returnTo(PI'), out(LL ; L), fromKernel(ML') ,                                 Att > Cnf } .

**** Made into a labeled topmost rule from module NETWORK
**** network process moves data from its DMA response buffer into its input buffer
  rl [proc-in] :
     { < NI | in(LL),       mem-in(L)       , Att > Cnf }
  => { < NI | in(LL ; L) ,  mem-in(nolabel) , Att > Cnf } .

**** Made into a topmost rule from module NETWORK
**** network process moves data from its output buffer into its DMA request buffer
  rl [proc-out] :
     { < NI | out(L ; LL), mem-out(nolabel) , Att > Cnf }
  => { < NI | out(LL)    , mem-out(L)       , Att > Cnf } .

  rl [nic1] :
     { < nic | nic-out(L & LS) , in(LL')     , Att > Cnf }
  => { < nic | nic-out(LS)     , in(LL' ; L) , Att > Cnf } .

**** Made into a topmost rule from module NETWORK
**** network process hands data back to other process (in this case: webapp)
  rl [msg-to-kernel] :
     { < NI | returnTo(PI) , in(L ; LL), toKernel(ML) ,                                  Att > Cnf }
  => { < NI | returnTo(PI) , in(LL)    , toKernel(ML ; msg(NI, PI, MSG-RETURN-URL, L)) , Att > Cnf } .

**** Made into a topmost rule from module KERNEL-POLICIES
**** kernel moves dma request from dma request buffer to NIC
  rl [mem-out] :
     { < NI     | mem-out(L') ,                        Att  >
       < kernel | networklabels(pi(NI, L, L'), NPIS) , Att2 >
       < nic    | nic-out(LS) ,                        Att3 > Cnf }
  => { < NI     | mem-out(nolabel) ,                   Att  >
       < kernel | networklabels(pi(NI, L, L'), NPIS) , Att2 >
       < nic    | nic-out(L' & LS) ,                   Att3 > Cnf } .

**** Made into a topmost rule from module KERNEL-POLICIES
**** kernel moves dma response from NIC to dma response buffer
  rl [mem-in] :
     { < NI     | mem-in(nolabel) ,                    Att  >
       < kernel | networklabels(pi(NI, L, L'), NPIS) , Att2 >
       < nic    | in(L' ; LL) ,                        Att3 > Cnf }
  => { < NI     | mem-in(L') ,                         Att  >
       < kernel | networklabels(pi(NI, L, L'), NPIS) , Att2 >
       < nic    | in(LL) ,                             Att3 > Cnf } .

**** the following [kernelReceviesOPMessage] rules all have a kernel object and a pipe
**** policy allows message from PPI1 to PPI2 with MsgType
  rl [kernelReceivesOPMessage-pa1] :
     { < kernel | handledCurrently(none), msgPolicy(policy(PPI1,PPI2,MT),MP), Att  >
       < PPI1   | toKernel(msg(ORG,PPI2,MT,L) ; ML),                          Att2 > Cnf }
  =>
     { < kernel | handledCurrently(msg(PPI1, PPI2, MT, L)), msgPolicy(policy(PPI1,PPI2,MT),MP), Att  >
       < PPI1   | toKernel(ML) ,                                                                Att2 > Cnf } .

**** policy allows message from webapp to NNPI2 (not network proc) with MT
  rl [kernelReceivesOPMessage-pa2] :
     { < kernel | handledCurrently(none), msgPolicy(policy(webapp,NNPI2,MT),MP), Att  >
       < WI     | toKernel(msg(ORG, NNPI2, MT, L) ; ML),                         Att2 > Cnf }
  =>
     { < kernel | handledCurrently(msg(WI, NNPI2, MT, L)), msgPolicy(policy(webapp,NNPI2,MT),MP), Att  >
       < WI     | toKernel(ML) ,                                                                  Att2 > Cnf } .

**** policy allows message from NNPI1 (not network proc) to webapp with MT
  rl [kernelReceivesOPMessage-pa3] :
     { < kernel | handledCurrently(none), msgPolicy(policy(NNPI1,webapp,MT),MP), Att  >
       < NNPI1  | toKernel(msg(ORG, WI, MT, L) ; ML),                            Att2 > Cnf }
  =>
     { < kernel | handledCurrently(msg(NNPI1, WI, MT, L)), msgPolicy(policy(NNPI1,webapp,MT),MP), Att  >
       < NNPI1  | toKernel(ML) ,                                                                  Att2 > Cnf } .

**** policy allows message from network proc to NWPI2 (not webapp) with MT
  rl [kernelReceivesOPMessage-pa4] :
     { < kernel | handledCurrently(none), msgPolicy(policy(network,NWPI2,MT),MP), Att  >
       < NI     | toKernel(msg(ORG, NWPI2, MT, L) ; ML),                          Att2 > Cnf }
  =>
     { < kernel | handledCurrently(msg(NI, NWPI2, MT, L)), msgPolicy(policy(network,NWPI2,MT),MP), Att  >
       < NI     | toKernel(ML),                                                                    Att2 > Cnf } .

**** policy allows message from NWPI1 (not webapp) to network proc with MT
  rl [kernelReceivesOPMessage-pa5] :
     { < kernel | handledCurrently(none), msgPolicy(policy(NWPI1,network,MT),MP), Att  >
       < NWPI1  | toKernel(msg(ORG, NI, MT, L) ; ML),                             Att2 > Cnf }
  =>
     { < kernel | handledCurrently(msg(NWPI1, NI, MT, L)), msgPolicy(policy(NWPI1,network,MT),MP), Att  >
       < NWPI1  | toKernel(ML) ,                                                                   Att2 > Cnf } .

**** policy allows message from webapp to network proc, but requires
**** further checking of them being connected based on the label -
**** that further check will deduce the actual target process and may
**** start a new one if necessary

**** a webapp sends a message to a network process
**** webapp  WI is labelled with L, sending message ORG -> NI with label L'
**** netproc NI source is labelled with L, target is labelled with L'
**** resulting message is WI -> NI with label L'
  rl [kernelReceivesOPMessage-pa6-cc2a] :
     { < kernel |
           handledCurrently(none),
	   msgPolicy(policy(webapp,network,MT),MP),
           weblabels(pi(WI,L),WPIS),
           networklabels(pi(NI',L,L'),NPIS),
           Att >
       < WI     |
           toKernel(msg(ORG, NI, MT, L') ; ML),
	   Att2 >
       Cnf }
  =>
     { < kernel |
           handledCurrently(msg(WI, NI', MT, L')),
           msgPolicy(policy(webapp,network,MT),MP),
           weblabels(pi(WI,L),WPIS),
           networklabels(pi(NI',L,L'),NPIS),
           Att >
       < WI     |
           toKernel(ML) ,
           Att2 >
       Cnf } .

**** If no appropriate network process can be found in the above
**** rule, start a new network proc - this assumes that there will
**** be no more than 772 network procs started, to prevent that, we
**** would need to check "Num'' < 1024" :
 crl [kernelReceivesOPMessage-pa6-cc2b] :
     { < kernel |
           handledCurrently(none),
           msgPolicy(policy(webapp,network,MT),MP),
           weblabels(pi(WI, L), WPIS),
           networklabels(NPIS),
           nextNetworkProc(N),
           Att >
       < WI     |
           toKernel(msg(ORG, NI, MT, L') ; ML),
	   Att2 >
       Cnf }
  =>
     { < kernel |
           handledCurrently(msg(WI, network(N), MT, L')),
           msgPolicy(policy(webapp,network,MT),MP),
           weblabels(pi(WI, L), WPIS),
           networklabels(NPIS),
           nextNetworkProc(s(N)),
           Att >
       < WI     |
           toKernel(ML),
           Att2 >
       < network(N) |
           returnTo(WI),
	   in(mtLL)        , out(mtLL) ,
           mem-in(nolabel) , mem-out(nolabel) ,
	   toKernel(mt)    , fromKernel(mt) >
           Cnf }
  if no-networkproc-for-label(L,NPIS) .

**** mirrored, for the reverse direction from network process to webapp:
**** there is a connection, just forward the message
**** network proc answering to webapp, thus having the correct recipient:
  rl [kernelReceivesOPMessage-pa7-cc1a] :
     { < kernel |
           handledCurrently(none),
           msgPolicy(policy(network,webapp,MT),MP),
           weblabels(pi(WI,L),WPIS),
           networklabels(pi(NI,L,L'),NPIS),
           Att >
       < NI     |
           toKernel(msg(ORG, WI, MT, L'') ; ML),
	   Att2 >
       Cnf }
  =>
     { < kernel |
           handledCurrently(msg(NI, WI, MT, L'')),
           msgPolicy(policy(network,webapp,MT),MP),
           weblabels(pi(WI,L),WPIS),
           networklabels(pi(NI,L,L'),NPIS),
           Att >
       < NI     |
           toKernel(ML) ,
           Att2 >
       Cnf } .

**** there is no connection, then drop the message
 crl [kernelReceivesOPMessage-pa7-cc1b] :
     { < kernel     |
           handledCurrently(none),
           msgPolicy(policy(network,webapp,MT),MP),
           weblabels(WPIS),
           networklabels(NPIS),
           Att >
       < network(N) |
           toKernel(msg(ORG, webapp(N'), MT, L'') ; ML),
	   Att2 > Cnf }
  =>
     { < kernel |
           --- handledCurrently(msg(network(N), webapp(N'), MT, L'')),
           handledCurrently(none),
           msgPolicy(policy(network,webapp,MT),MP),
           weblabels(WPIS),
           networklabels(NPIS),
           Att >
       < network(N) |
           toKernel(ML) ,
           Att2 >
       Cnf }
  if no-networkproc(N,NPIS) or no-webapp(N',WPIS) .

**** policy allows message from UI to change current webapp to webapp WI with MSG-SWITCH-TAB
  rl [kernelReceivesOPMessage-pa8] :
     { < kernel |
           handledCurrently(none),
           msgPolicy(policy(ui,webapp,MSG-SWITCH-TAB),MP),
           Att  >
       < ui     |
           toKernel(msg(ORG, WI, MSG-SWITCH-TAB, L) ; ML),
           Att2 >
       Cnf }
  =>
     { < kernel |
           handledCurrently(kernelDo(msg(ui,WI,MSG-SWITCH-TAB,L))),
	   msgPolicy(policy(ui,webapp,MSG-SWITCH-TAB),MP),
           Att >
       < ui     |
           toKernel(ML),
           Att2 >
       Cnf } .

**** policy allows message from UI to change current webapp to a new webapp loading URL with MSG-NEW-URL
  rl [kernelReceivesOPMessage-pa9] :
     { < kernel | handledCurrently(none), msgPolicy(policy(ui,webapp,MSG-NEW-URL),MP), Att  >
       < ui     | toKernel(msg(ORG,webapp, MSG-NEW-URL, L) ; ML),                      Att2 >
       Cnf }
  =>
     { < kernel |
           handledCurrently(kernelDo(msg(ui, webapp, MSG-NEW-URL, L))),
           msgPolicy(policy(ui,webapp,MSG-NEW-URL),MP),
           Att >
       < ui     |
           toKernel(ML) ,
           Att2 >
       Cnf } .

**** no policy allowed this, therefore implicitly disallowed and dropped
  rl [kernelReceivesOPMessage-pa10] :
     { < kernel | handledCurrently(none), msgPolicy(MP), Att  >
       < PPI    | toKernel(msg(ORG, PPI', MT, L) ; ML),  Att2 > Cnf }
  =>
     { < kernel | handledCurrently(none), msgPolicy(MP), Att  >
       < PPI    | toKernel(ML),                          Att2 > Cnf } .

**** Made into a topmost rule from module KERNEL-POLICIES
 rl [kernelForwardsOPMessage] :
     { < kernel | handledCurrently(msg(ORG, PPI', MT, L)) , Att  >
       < PPI'   | fromKernel(ML) ,                          Att2 > Cnf }
  =>
     { < kernel | handledCurrently(none),                  Att  >
       < PPI'   | fromKernel(ML ; msg(ORG, PPI', MT, L)) , Att2 > Cnf } .

**** Made into a topmost rule from module KERNEL-POLICIES
  rl [tab-change] :
     { < kernel  |
           handledCurrently(kernelDo(msg(ui, WI', MSG-SWITCH-TAB, L1))) ,
           displayedTopBar(L2),
           weblabels(pi(WI', L'), WPIS) ,
           Att >
       < display |
           activeWebapp(WI),
           displayedContent(L3),
           Att2 >
       Cnf }
  =>
     { < kernel  |
           handledCurrently(none) ,
           displayedTopBar(L'),
           weblabels(pi(WI', L'), WPIS) ,
           Att >
       < display |
           activeWebapp(WI'),
           displayedContent(about-blank),
           Att2 >
       Cnf } .

**** Made into a tomost rule that uses equality enrichment in the condition
**** from module KERNEL-POLICIES
**** Q. what could be wrong with this since the number of solutions
**** in one of the experiments change (Camilo) See equational enrichment
**** for labels.
**** A. there was another constructor for label in the specification;
**** such a definition was moved to module LABEL and the equality
**** enrichment defined accordingly
 crl [change-display] :
     { < display | activeWebapp(WI), displayedContent(L),  Att2 >
       < WI      | rendered(L'),                           Att3 > Cnf }
  => { < display | activeWebapp(WI), displayedContent(L'), Att2 >
       < WI      | rendered(L'),                           Att3 > Cnf }
   if L =/= L' .

**** Made into a topmost rule from module KERNEL-POLICIES
 crl [new-url] :
     { < kernel    |
           handledCurrently(kernelDo(msg(ui, webapp, MSG-NEW-URL, URL))) ,
           displayedTopBar(L),
           weblabels(WPIS) ,
           Att >
       < display   |
           activeWebapp(WI),
           displayedContent(L'),
           Att2 >
       < webappmgr | nextWAN(NewWA) , Att3 > Cnf }
  =>
     { < kernel    |
           handledCurrently(none) ,
           displayedTopBar(URL),
           weblabels(pi(webapp(NewWA), URL), WPIS) ,
           Att >
       < display   |
           activeWebapp(webapp(NewWA)),
           displayedContent(about-blank),
           Att2 >
       < webappmgr | nextWAN(s(NewWA)) , Att3 >
       < webapp(NewWA) |
           rendered(about-blank) ,
           URL(URL) ,
           loading(false) ,
           fromKernel(mt) ,
           toKernel(mt) > Cnf }
  if NewWA < 1056 .
endm

select REMOVE-IDS-BYRULE .

red removeIdsByRule(upModule('KERNEL,true),non-handled) .
